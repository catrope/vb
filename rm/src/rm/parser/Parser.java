/* This file was generated by SableCC (http://www.sablecc.org/). */

package rm.parser;

import rm.lexer.*;
import rm.node.*;
import rm.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce ADefProg */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce ACompProg */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AEndProg */
		    {
			ArrayList list = new2();
			push(goTo(0), list, false);
		    }
		    break;
                    case 3: /* reduce ALetDef */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AExprComp */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce ANonemptyParlst */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AEmptyParlst */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AMultiPars */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce ASinglePars */
		    {
			ArrayList list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AIfthenExpr */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce ASimpleExpr */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce ARelRelexpr */
		    {
			ArrayList list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce ATermSmplexpr */
		    {
			ArrayList list = new12();
			push(goTo(7), list, false);
		    }
		    break;
                    case 13: /* reduce AAddSmplexpr */
		    {
			ArrayList list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce AFactorTerm */
		    {
			ArrayList list = new14();
			push(goTo(8), list, false);
		    }
		    break;
                    case 15: /* reduce AMulTerm */
		    {
			ArrayList list = new15();
			push(goTo(8), list, false);
		    }
		    break;
                    case 16: /* reduce AExprFactor */
		    {
			ArrayList list = new16();
			push(goTo(9), list, false);
		    }
		    break;
                    case 17: /* reduce AIntFactor */
		    {
			ArrayList list = new17();
			push(goTo(9), list, false);
		    }
		    break;
                    case 18: /* reduce ARealFactor */
		    {
			ArrayList list = new18();
			push(goTo(9), list, false);
		    }
		    break;
                    case 19: /* reduce ACallFactor */
		    {
			ArrayList list = new19();
			push(goTo(9), list, false);
		    }
		    break;
                    case 20: /* reduce ANonemptyArglst */
		    {
			ArrayList list = new20();
			push(goTo(10), list, false);
		    }
		    break;
                    case 21: /* reduce AEmptyArglst */
		    {
			ArrayList list = new21();
			push(goTo(10), list, false);
		    }
		    break;
                    case 22: /* reduce AMultiArgs */
		    {
			ArrayList list = new22();
			push(goTo(11), list, false);
		    }
		    break;
                    case 23: /* reduce ASingleArgs */
		    {
			ArrayList list = new23();
			push(goTo(11), list, false);
		    }
		    break;
                    case 24: /* reduce APlusAddop */
		    {
			ArrayList list = new24();
			push(goTo(12), list, false);
		    }
		    break;
                    case 25: /* reduce AMinusAddop */
		    {
			ArrayList list = new25();
			push(goTo(12), list, false);
		    }
		    break;
                    case 26: /* reduce ATimesMulop */
		    {
			ArrayList list = new26();
			push(goTo(13), list, false);
		    }
		    break;
                    case 27: /* reduce AIdivMulop */
		    {
			ArrayList list = new27();
			push(goTo(13), list, false);
		    }
		    break;
                    case 28: /* reduce ARdivMulop */
		    {
			ArrayList list = new28();
			push(goTo(13), list, false);
		    }
		    break;
                    case 29: /* reduce AImodMulop */
		    {
			ArrayList list = new29();
			push(goTo(13), list, false);
		    }
		    break;
                    case 30: /* reduce AEqualRelop */
		    {
			ArrayList list = new30();
			push(goTo(14), list, false);
		    }
		    break;
                    case 31: /* reduce ANoteqRelop */
		    {
			ArrayList list = new31();
			push(goTo(14), list, false);
		    }
		    break;
                    case 32: /* reduce ALessRelop */
		    {
			ArrayList list = new32();
			push(goTo(14), list, false);
		    }
		    break;
                    case 33: /* reduce ALseqRelop */
		    {
			ArrayList list = new33();
			push(goTo(14), list, false);
		    }
		    break;
                    case 34: /* reduce AGreqRelop */
		    {
			ArrayList list = new34();
			push(goTo(14), list, false);
		    }
		    break;
                    case 35: /* reduce AGrtrRelop */
		    {
			ArrayList list = new35();
			push(goTo(14), list, false);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce ADefProg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        PDef pdefNode2;
        PProg pprogNode3;
        pdefNode2 = (PDef)nodeArrayList1.get(0);
        pprogNode3 = (PProg)nodeArrayList2.get(0);

        pprogNode1 = new ADefProg(pdefNode2, pprogNode3);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce ACompProg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        PComp pcompNode2;
        PProg pprogNode3;
        pcompNode2 = (PComp)nodeArrayList1.get(0);
        pprogNode3 = (PProg)nodeArrayList2.get(0);

        pprogNode1 = new ACompProg(pcompNode2, pprogNode3);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AEndProg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        TEndsym tendsymNode2;
        tendsymNode2 = (TEndsym)nodeArrayList1.get(0);

        pprogNode1 = new AEndProg(tendsymNode2);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ALetDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDef pdefNode1;
        {
            // Block
        TLetsym tletsymNode2;
        TIdent tidentNode3;
        PParlst pparlstNode4;
        TEqualsym tequalsymNode5;
        PExpr pexprNode6;
        TSemicolonsym tsemicolonsymNode7;
        tletsymNode2 = (TLetsym)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        pparlstNode4 = (PParlst)nodeArrayList3.get(0);
        tequalsymNode5 = (TEqualsym)nodeArrayList4.get(0);
        pexprNode6 = (PExpr)nodeArrayList5.get(0);
        tsemicolonsymNode7 = (TSemicolonsym)nodeArrayList6.get(0);

        pdefNode1 = new ALetDef(tletsymNode2, tidentNode3, pparlstNode4, tequalsymNode5, pexprNode6, tsemicolonsymNode7);
        }
	nodeList.add(pdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AExprComp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PComp pcompNode1;
        {
            // Block
        PExpr pexprNode2;
        TQuestionsym tquestionsymNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tquestionsymNode3 = (TQuestionsym)nodeArrayList2.get(0);

        pcompNode1 = new AExprComp(pexprNode2, tquestionsymNode3);
        }
	nodeList.add(pcompNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ANonemptyParlst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParlst pparlstNode1;
        {
            // Block
        TLparsym tlparsymNode2;
        PPars pparsNode3;
        TRparsym trparsymNode4;
        tlparsymNode2 = (TLparsym)nodeArrayList1.get(0);
        pparsNode3 = (PPars)nodeArrayList2.get(0);
        trparsymNode4 = (TRparsym)nodeArrayList3.get(0);

        pparlstNode1 = new ANonemptyParlst(tlparsymNode2, pparsNode3, trparsymNode4);
        }
	nodeList.add(pparlstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AEmptyParlst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParlst pparlstNode1;
        {
            // Block
        TEmpty temptyNode2;
        temptyNode2 = (TEmpty)nodeArrayList1.get(0);

        pparlstNode1 = new AEmptyParlst(temptyNode2);
        }
	nodeList.add(pparlstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AMultiPars */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPars pparsNode1;
        {
            // Block
        PPars pparsNode2;
        TCommasym tcommasymNode3;
        TIdent tidentNode4;
        pparsNode2 = (PPars)nodeArrayList1.get(0);
        tcommasymNode3 = (TCommasym)nodeArrayList2.get(0);
        tidentNode4 = (TIdent)nodeArrayList3.get(0);

        pparsNode1 = new AMultiPars(pparsNode2, tcommasymNode3, tidentNode4);
        }
	nodeList.add(pparsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce ASinglePars */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPars pparsNode1;
        {
            // Block
        TIdent tidentNode2;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);

        pparsNode1 = new ASinglePars(tidentNode2);
        }
	nodeList.add(pparsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AIfthenExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIfsym tifsymNode2;
        PRelexpr prelexprNode3;
        TThensym tthensymNode4;
        PExpr pexprNode5;
        TElsesym telsesymNode6;
        PExpr pexprNode7;
        tifsymNode2 = (TIfsym)nodeArrayList1.get(0);
        prelexprNode3 = (PRelexpr)nodeArrayList2.get(0);
        tthensymNode4 = (TThensym)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        telsesymNode6 = (TElsesym)nodeArrayList5.get(0);
        pexprNode7 = (PExpr)nodeArrayList6.get(0);

        pexprNode1 = new AIfthenExpr(tifsymNode2, prelexprNode3, tthensymNode4, pexprNode5, telsesymNode6, pexprNode7);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce ASimpleExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PSmplexpr psmplexprNode2;
        psmplexprNode2 = (PSmplexpr)nodeArrayList1.get(0);

        pexprNode1 = new ASimpleExpr(psmplexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ARelRelexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelexpr prelexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PRelop prelopNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        prelopNode3 = (PRelop)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        prelexprNode1 = new ARelRelexpr(pexprNode2, prelopNode3, pexprNode4);
        }
	nodeList.add(prelexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce ATermSmplexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSmplexpr psmplexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        psmplexprNode1 = new ATermSmplexpr(ptermNode2);
        }
	nodeList.add(psmplexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAddSmplexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSmplexpr psmplexprNode1;
        {
            // Block
        PSmplexpr psmplexprNode2;
        PAddop paddopNode3;
        PTerm ptermNode4;
        psmplexprNode2 = (PSmplexpr)nodeArrayList1.get(0);
        paddopNode3 = (PAddop)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        psmplexprNode1 = new AAddSmplexpr(psmplexprNode2, paddopNode3, ptermNode4);
        }
	nodeList.add(psmplexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AMulTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        PMulop pmulopNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        pmulopNode3 = (PMulop)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AMulTerm(ptermNode2, pmulopNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AExprFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLparsym tlparsymNode2;
        PExpr pexprNode3;
        TRparsym trparsymNode4;
        tlparsymNode2 = (TLparsym)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparsymNode4 = (TRparsym)nodeArrayList3.get(0);

        pfactorNode1 = new AExprFactor(tlparsymNode2, pexprNode3, trparsymNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AIntFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TIntdenotation tintdenotationNode2;
        tintdenotationNode2 = (TIntdenotation)nodeArrayList1.get(0);

        pfactorNode1 = new AIntFactor(tintdenotationNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ARealFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TRealdenotation trealdenotationNode2;
        trealdenotationNode2 = (TRealdenotation)nodeArrayList1.get(0);

        pfactorNode1 = new ARealFactor(trealdenotationNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ACallFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TIdent tidentNode2;
        PArglst parglstNode3;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        parglstNode3 = (PArglst)nodeArrayList2.get(0);

        pfactorNode1 = new ACallFactor(tidentNode2, parglstNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ANonemptyArglst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArglst parglstNode1;
        {
            // Block
        TLparsym tlparsymNode2;
        PArgs pargsNode3;
        TRparsym trparsymNode4;
        tlparsymNode2 = (TLparsym)nodeArrayList1.get(0);
        pargsNode3 = (PArgs)nodeArrayList2.get(0);
        trparsymNode4 = (TRparsym)nodeArrayList3.get(0);

        parglstNode1 = new ANonemptyArglst(tlparsymNode2, pargsNode3, trparsymNode4);
        }
	nodeList.add(parglstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AEmptyArglst */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArglst parglstNode1;
        {
            // Block
        TEmpty temptyNode2;
        temptyNode2 = (TEmpty)nodeArrayList1.get(0);

        parglstNode1 = new AEmptyArglst(temptyNode2);
        }
	nodeList.add(parglstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AMultiArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArgs pargsNode2;
        TCommasym tcommasymNode3;
        PExpr pexprNode4;
        pargsNode2 = (PArgs)nodeArrayList1.get(0);
        tcommasymNode3 = (TCommasym)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pargsNode1 = new AMultiArgs(pargsNode2, tcommasymNode3, pexprNode4);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ASingleArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pargsNode1 = new ASingleArgs(pexprNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce APlusAddop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAddop paddopNode1;
        {
            // Block
        TPlussym tplussymNode2;
        tplussymNode2 = (TPlussym)nodeArrayList1.get(0);

        paddopNode1 = new APlusAddop(tplussymNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AMinusAddop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAddop paddopNode1;
        {
            // Block
        TMinussym tminussymNode2;
        tminussymNode2 = (TMinussym)nodeArrayList1.get(0);

        paddopNode1 = new AMinusAddop(tminussymNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ATimesMulop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TTimessym ttimessymNode2;
        ttimessymNode2 = (TTimessym)nodeArrayList1.get(0);

        pmulopNode1 = new ATimesMulop(ttimessymNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AIdivMulop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TIdivsym tidivsymNode2;
        tidivsymNode2 = (TIdivsym)nodeArrayList1.get(0);

        pmulopNode1 = new AIdivMulop(tidivsymNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ARdivMulop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TRdivsym trdivsymNode2;
        trdivsymNode2 = (TRdivsym)nodeArrayList1.get(0);

        pmulopNode1 = new ARdivMulop(trdivsymNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AImodMulop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TImodsym timodsymNode2;
        timodsymNode2 = (TImodsym)nodeArrayList1.get(0);

        pmulopNode1 = new AImodMulop(timodsymNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AEqualRelop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TEqualsym tequalsymNode2;
        tequalsymNode2 = (TEqualsym)nodeArrayList1.get(0);

        prelopNode1 = new AEqualRelop(tequalsymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ANoteqRelop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TNoteqsym tnoteqsymNode2;
        tnoteqsymNode2 = (TNoteqsym)nodeArrayList1.get(0);

        prelopNode1 = new ANoteqRelop(tnoteqsymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ALessRelop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TLesssym tlesssymNode2;
        tlesssymNode2 = (TLesssym)nodeArrayList1.get(0);

        prelopNode1 = new ALessRelop(tlesssymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ALseqRelop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TLseqsym tlseqsymNode2;
        tlseqsymNode2 = (TLseqsym)nodeArrayList1.get(0);

        prelopNode1 = new ALseqRelop(tlseqsymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AGreqRelop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TGreqsym tgreqsymNode2;
        tgreqsymNode2 = (TGreqsym)nodeArrayList1.get(0);

        prelopNode1 = new AGreqRelop(tgreqsymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AGrtrRelop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TGrtrsym tgrtrsymNode2;
        tgrtrsymNode2 = (TGrtrsym)nodeArrayList1.get(0);

        prelopNode1 = new AGrtrRelop(tgrtrsymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {12, SHIFT, 1}, {17, SHIFT, 2}, {18, SHIFT, 3}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, ERROR, 1}, {12, SHIFT, 1}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 3}, {24, SHIFT, 16}, },
			{{-1, ERROR, 4}, {12, SHIFT, 1}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 7}, {12, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 8}, {26, ACCEPT, -1}, },
			{{-1, ERROR, 9}, {12, SHIFT, 1}, {17, SHIFT, 2}, {18, SHIFT, 3}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, ERROR, 10}, {12, SHIFT, 1}, {17, SHIFT, 2}, {18, SHIFT, 3}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, ERROR, 11}, {14, SHIFT, 24}, },
			{{-1, REDUCE, 10}, {0, SHIFT, 25}, {1, SHIFT, 26}, },
			{{-1, REDUCE, 12}, {2, SHIFT, 28}, {3, SHIFT, 29}, {4, SHIFT, 30}, {5, SHIFT, 31}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 15}, {13, SHIFT, 33}, },
			{{-1, ERROR, 16}, {12, SHIFT, 34}, {25, SHIFT, 35}, },
			{{-1, ERROR, 17}, {6, SHIFT, 37}, {7, SHIFT, 38}, {8, SHIFT, 39}, {9, SHIFT, 40}, {10, SHIFT, 41}, {11, SHIFT, 42}, },
			{{-1, ERROR, 18}, {20, SHIFT, 44}, },
			{{-1, ERROR, 19}, {12, SHIFT, 1}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 27}, {12, SHIFT, 1}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 32}, {12, SHIFT, 1}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 34}, {24, SHIFT, 49}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 36}, {6, SHIFT, 51}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 43}, {12, SHIFT, 1}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, ERROR, 44}, {12, SHIFT, 1}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 46}, {13, SHIFT, 54}, {15, SHIFT, 55}, },
			{{-1, REDUCE, 13}, {2, SHIFT, 28}, {3, SHIFT, 29}, {4, SHIFT, 30}, {5, SHIFT, 31}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 50}, {13, SHIFT, 56}, {15, SHIFT, 57}, },
			{{-1, ERROR, 51}, {12, SHIFT, 1}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 53}, {21, SHIFT, 59}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 55}, {12, SHIFT, 1}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 57}, {24, SHIFT, 61}, },
			{{-1, ERROR, 58}, {16, SHIFT, 62}, },
			{{-1, ERROR, 59}, {12, SHIFT, 1}, {19, SHIFT, 4}, {22, SHIFT, 5}, {23, SHIFT, 6}, {24, SHIFT, 7}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 9}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 8}, {9, 22}, {10, 23}, },
			{{-1, 9}, },
			{{-1, 10}, },
			{{-1, 36}, },
			{{-1, 50}, },
			{{-1, 11}, {1, 15}, {4, 17}, {19, 45}, {43, 52}, {44, 53}, {51, 58}, {55, 60}, {59, 63}, },
			{{-1, 18}, },
			{{-1, 12}, },
			{{-1, 13}, {27, 47}, },
			{{-1, 14}, {32, 48}, },
			{{-1, 21}, },
			{{-1, 46}, },
			{{-1, 27}, },
			{{-1, 32}, },
			{{-1, 43}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '(', '.', 'LET', 'IF', intdenotation, realdenotation, ident",
			"expecting: '(', 'IF', intdenotation, realdenotation, ident",
			"expecting: EOF",
			"expecting: ident",
			"expecting: '+', '-', '*', '\', '/', '%', '=', '!=', '<', '<=', '>=', '>', ')', '?', ',', ';', 'THEN', 'ELSE'",
			"expecting: '(', empty",
			"expecting: '?'",
			"expecting: '+', '-', '=', '!=', '<', '<=', '>=', '>', ')', '?', ',', ';', 'THEN', 'ELSE'",
			"expecting: ')'",
			"expecting: '=', '!=', '<', '<=', '>=', '>'",
			"expecting: 'THEN'",
			"expecting: '(', intdenotation, realdenotation, ident",
			"expecting: '='",
			"expecting: ')', ','",
			"expecting: 'ELSE'",
			"expecting: ';'",
			"expecting: '=', '!=', '<', '<=', '>=', '>', ')', '?', ',', ';', 'THEN', 'ELSE'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 1, 4, 4, 5, 2, 0, 0, 6, 7, 4, 4, 8, 5, 9, 10, 1, 4, 4, 2, 2, 0, 11, 11, 11, 11, 11, 11, 11, 11, 4, 3, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 4, 4, 13, 13, 1, 10, 14, 4, 1, 12, 3, 15, 1, 13, 13, 0, 16, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
