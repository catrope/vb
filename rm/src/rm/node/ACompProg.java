/* This file was generated by SableCC (http://www.sablecc.org/). */

package rm.node;

import rm.analysis.*;

@SuppressWarnings("nls")
public final class ACompProg extends PProg
{
    private PComp _comp_;
    private PProg _prog_;

    public ACompProg()
    {
        // Constructor
    }

    public ACompProg(
        @SuppressWarnings("hiding") PComp _comp_,
        @SuppressWarnings("hiding") PProg _prog_)
    {
        // Constructor
        setComp(_comp_);

        setProg(_prog_);

    }

    @Override
    public Object clone()
    {
        return new ACompProg(
            cloneNode(this._comp_),
            cloneNode(this._prog_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompProg(this);
    }

    public PComp getComp()
    {
        return this._comp_;
    }

    public void setComp(PComp node)
    {
        if(this._comp_ != null)
        {
            this._comp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comp_ = node;
    }

    public PProg getProg()
    {
        return this._prog_;
    }

    public void setProg(PProg node)
    {
        if(this._prog_ != null)
        {
            this._prog_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._prog_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comp_)
            + toString(this._prog_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comp_ == child)
        {
            this._comp_ = null;
            return;
        }

        if(this._prog_ == child)
        {
            this._prog_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comp_ == oldChild)
        {
            setComp((PComp) newChild);
            return;
        }

        if(this._prog_ == oldChild)
        {
            setProg((PProg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
