/* This file was generated by SableCC (http://www.sablecc.org/). */

package rm.node;

import rm.analysis.*;

@SuppressWarnings("nls")
public final class ALetDef extends PDef
{
    private TLetsym _letsym_;
    private TIdent _ident_;
    private PParlst _parlst_;
    private TEqualsym _equalsym_;
    private PExpr _expr_;
    private TSemicolonsym _semicolonsym_;

    public ALetDef()
    {
        // Constructor
    }

    public ALetDef(
        @SuppressWarnings("hiding") TLetsym _letsym_,
        @SuppressWarnings("hiding") TIdent _ident_,
        @SuppressWarnings("hiding") PParlst _parlst_,
        @SuppressWarnings("hiding") TEqualsym _equalsym_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TSemicolonsym _semicolonsym_)
    {
        // Constructor
        setLetsym(_letsym_);

        setIdent(_ident_);

        setParlst(_parlst_);

        setEqualsym(_equalsym_);

        setExpr(_expr_);

        setSemicolonsym(_semicolonsym_);

    }

    @Override
    public Object clone()
    {
        return new ALetDef(
            cloneNode(this._letsym_),
            cloneNode(this._ident_),
            cloneNode(this._parlst_),
            cloneNode(this._equalsym_),
            cloneNode(this._expr_),
            cloneNode(this._semicolonsym_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALetDef(this);
    }

    public TLetsym getLetsym()
    {
        return this._letsym_;
    }

    public void setLetsym(TLetsym node)
    {
        if(this._letsym_ != null)
        {
            this._letsym_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._letsym_ = node;
    }

    public TIdent getIdent()
    {
        return this._ident_;
    }

    public void setIdent(TIdent node)
    {
        if(this._ident_ != null)
        {
            this._ident_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ident_ = node;
    }

    public PParlst getParlst()
    {
        return this._parlst_;
    }

    public void setParlst(PParlst node)
    {
        if(this._parlst_ != null)
        {
            this._parlst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parlst_ = node;
    }

    public TEqualsym getEqualsym()
    {
        return this._equalsym_;
    }

    public void setEqualsym(TEqualsym node)
    {
        if(this._equalsym_ != null)
        {
            this._equalsym_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equalsym_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TSemicolonsym getSemicolonsym()
    {
        return this._semicolonsym_;
    }

    public void setSemicolonsym(TSemicolonsym node)
    {
        if(this._semicolonsym_ != null)
        {
            this._semicolonsym_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolonsym_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._letsym_)
            + toString(this._ident_)
            + toString(this._parlst_)
            + toString(this._equalsym_)
            + toString(this._expr_)
            + toString(this._semicolonsym_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._letsym_ == child)
        {
            this._letsym_ = null;
            return;
        }

        if(this._ident_ == child)
        {
            this._ident_ = null;
            return;
        }

        if(this._parlst_ == child)
        {
            this._parlst_ = null;
            return;
        }

        if(this._equalsym_ == child)
        {
            this._equalsym_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._semicolonsym_ == child)
        {
            this._semicolonsym_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._letsym_ == oldChild)
        {
            setLetsym((TLetsym) newChild);
            return;
        }

        if(this._ident_ == oldChild)
        {
            setIdent((TIdent) newChild);
            return;
        }

        if(this._parlst_ == oldChild)
        {
            setParlst((PParlst) newChild);
            return;
        }

        if(this._equalsym_ == oldChild)
        {
            setEqualsym((TEqualsym) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._semicolonsym_ == oldChild)
        {
            setSemicolonsym((TSemicolonsym) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
