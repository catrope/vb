/* This file was generated by SableCC (http://www.sablecc.org/). */

package rm.node;

import rm.analysis.*;

@SuppressWarnings("nls")
public final class AExprFactor extends PFactor
{
    private TLparsym _lparsym_;
    private PExpr _expr_;
    private TRparsym _rparsym_;

    public AExprFactor()
    {
        // Constructor
    }

    public AExprFactor(
        @SuppressWarnings("hiding") TLparsym _lparsym_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TRparsym _rparsym_)
    {
        // Constructor
        setLparsym(_lparsym_);

        setExpr(_expr_);

        setRparsym(_rparsym_);

    }

    @Override
    public Object clone()
    {
        return new AExprFactor(
            cloneNode(this._lparsym_),
            cloneNode(this._expr_),
            cloneNode(this._rparsym_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExprFactor(this);
    }

    public TLparsym getLparsym()
    {
        return this._lparsym_;
    }

    public void setLparsym(TLparsym node)
    {
        if(this._lparsym_ != null)
        {
            this._lparsym_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lparsym_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TRparsym getRparsym()
    {
        return this._rparsym_;
    }

    public void setRparsym(TRparsym node)
    {
        if(this._rparsym_ != null)
        {
            this._rparsym_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rparsym_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lparsym_)
            + toString(this._expr_)
            + toString(this._rparsym_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lparsym_ == child)
        {
            this._lparsym_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._rparsym_ == child)
        {
            this._rparsym_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lparsym_ == oldChild)
        {
            setLparsym((TLparsym) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._rparsym_ == oldChild)
        {
            setRparsym((TRparsym) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
