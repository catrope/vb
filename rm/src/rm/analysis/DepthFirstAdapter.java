/* This file was generated by SableCC (http://www.sablecc.org/). */

package rm.analysis;

import java.util.*;
import rm.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProg().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inADefProg(ADefProg node)
    {
        defaultIn(node);
    }

    public void outADefProg(ADefProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefProg(ADefProg node)
    {
        inADefProg(node);
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        if(node.getProg() != null)
        {
            node.getProg().apply(this);
        }
        outADefProg(node);
    }

    public void inACompProg(ACompProg node)
    {
        defaultIn(node);
    }

    public void outACompProg(ACompProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompProg(ACompProg node)
    {
        inACompProg(node);
        if(node.getComp() != null)
        {
            node.getComp().apply(this);
        }
        if(node.getProg() != null)
        {
            node.getProg().apply(this);
        }
        outACompProg(node);
    }

    public void inAEndProg(AEndProg node)
    {
        defaultIn(node);
    }

    public void outAEndProg(AEndProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEndProg(AEndProg node)
    {
        inAEndProg(node);
        if(node.getEndsym() != null)
        {
            node.getEndsym().apply(this);
        }
        outAEndProg(node);
    }

    public void inALetDef(ALetDef node)
    {
        defaultIn(node);
    }

    public void outALetDef(ALetDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALetDef(ALetDef node)
    {
        inALetDef(node);
        if(node.getLetsym() != null)
        {
            node.getLetsym().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getParlst() != null)
        {
            node.getParlst().apply(this);
        }
        if(node.getEqualsym() != null)
        {
            node.getEqualsym().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolonsym() != null)
        {
            node.getSemicolonsym().apply(this);
        }
        outALetDef(node);
    }

    public void inAExprComp(AExprComp node)
    {
        defaultIn(node);
    }

    public void outAExprComp(AExprComp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprComp(AExprComp node)
    {
        inAExprComp(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getQuestionsym() != null)
        {
            node.getQuestionsym().apply(this);
        }
        outAExprComp(node);
    }

    public void inANonemptyParlst(ANonemptyParlst node)
    {
        defaultIn(node);
    }

    public void outANonemptyParlst(ANonemptyParlst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonemptyParlst(ANonemptyParlst node)
    {
        inANonemptyParlst(node);
        if(node.getLparsym() != null)
        {
            node.getLparsym().apply(this);
        }
        if(node.getPars() != null)
        {
            node.getPars().apply(this);
        }
        if(node.getRparsym() != null)
        {
            node.getRparsym().apply(this);
        }
        outANonemptyParlst(node);
    }

    public void inAEmptyParlst(AEmptyParlst node)
    {
        defaultIn(node);
    }

    public void outAEmptyParlst(AEmptyParlst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyParlst(AEmptyParlst node)
    {
        inAEmptyParlst(node);
        if(node.getEmpty() != null)
        {
            node.getEmpty().apply(this);
        }
        outAEmptyParlst(node);
    }

    public void inAMultiPars(AMultiPars node)
    {
        defaultIn(node);
    }

    public void outAMultiPars(AMultiPars node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiPars(AMultiPars node)
    {
        inAMultiPars(node);
        if(node.getPars() != null)
        {
            node.getPars().apply(this);
        }
        if(node.getCommasym() != null)
        {
            node.getCommasym().apply(this);
        }
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outAMultiPars(node);
    }

    public void inASinglePars(ASinglePars node)
    {
        defaultIn(node);
    }

    public void outASinglePars(ASinglePars node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASinglePars(ASinglePars node)
    {
        inASinglePars(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        outASinglePars(node);
    }

    public void inAIfthenExpr(AIfthenExpr node)
    {
        defaultIn(node);
    }

    public void outAIfthenExpr(AIfthenExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfthenExpr(AIfthenExpr node)
    {
        inAIfthenExpr(node);
        if(node.getIfsym() != null)
        {
            node.getIfsym().apply(this);
        }
        if(node.getRelexpr() != null)
        {
            node.getRelexpr().apply(this);
        }
        if(node.getThensym() != null)
        {
            node.getThensym().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getElsesym() != null)
        {
            node.getElsesym().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAIfthenExpr(node);
    }

    public void inASimpleExpr(ASimpleExpr node)
    {
        defaultIn(node);
    }

    public void outASimpleExpr(ASimpleExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExpr(ASimpleExpr node)
    {
        inASimpleExpr(node);
        if(node.getSmplexpr() != null)
        {
            node.getSmplexpr().apply(this);
        }
        outASimpleExpr(node);
    }

    public void inARelRelexpr(ARelRelexpr node)
    {
        defaultIn(node);
    }

    public void outARelRelexpr(ARelRelexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelRelexpr(ARelRelexpr node)
    {
        inARelRelexpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRelop() != null)
        {
            node.getRelop().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outARelRelexpr(node);
    }

    public void inATermSmplexpr(ATermSmplexpr node)
    {
        defaultIn(node);
    }

    public void outATermSmplexpr(ATermSmplexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermSmplexpr(ATermSmplexpr node)
    {
        inATermSmplexpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermSmplexpr(node);
    }

    public void inAAddSmplexpr(AAddSmplexpr node)
    {
        defaultIn(node);
    }

    public void outAAddSmplexpr(AAddSmplexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddSmplexpr(AAddSmplexpr node)
    {
        inAAddSmplexpr(node);
        if(node.getSmplexpr() != null)
        {
            node.getSmplexpr().apply(this);
        }
        if(node.getAddop() != null)
        {
            node.getAddop().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAAddSmplexpr(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAMulTerm(AMulTerm node)
    {
        defaultIn(node);
    }

    public void outAMulTerm(AMulTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulTerm(AMulTerm node)
    {
        inAMulTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMulop() != null)
        {
            node.getMulop().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMulTerm(node);
    }

    public void inAExprFactor(AExprFactor node)
    {
        defaultIn(node);
    }

    public void outAExprFactor(AExprFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprFactor(AExprFactor node)
    {
        inAExprFactor(node);
        if(node.getLparsym() != null)
        {
            node.getLparsym().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRparsym() != null)
        {
            node.getRparsym().apply(this);
        }
        outAExprFactor(node);
    }

    public void inAIntFactor(AIntFactor node)
    {
        defaultIn(node);
    }

    public void outAIntFactor(AIntFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntFactor(AIntFactor node)
    {
        inAIntFactor(node);
        if(node.getIntdenotation() != null)
        {
            node.getIntdenotation().apply(this);
        }
        outAIntFactor(node);
    }

    public void inARealFactor(ARealFactor node)
    {
        defaultIn(node);
    }

    public void outARealFactor(ARealFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealFactor(ARealFactor node)
    {
        inARealFactor(node);
        if(node.getRealdenotation() != null)
        {
            node.getRealdenotation().apply(this);
        }
        outARealFactor(node);
    }

    public void inACallFactor(ACallFactor node)
    {
        defaultIn(node);
    }

    public void outACallFactor(ACallFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallFactor(ACallFactor node)
    {
        inACallFactor(node);
        if(node.getIdent() != null)
        {
            node.getIdent().apply(this);
        }
        if(node.getArglst() != null)
        {
            node.getArglst().apply(this);
        }
        outACallFactor(node);
    }

    public void inANonemptyArglst(ANonemptyArglst node)
    {
        defaultIn(node);
    }

    public void outANonemptyArglst(ANonemptyArglst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonemptyArglst(ANonemptyArglst node)
    {
        inANonemptyArglst(node);
        if(node.getLparsym() != null)
        {
            node.getLparsym().apply(this);
        }
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getRparsym() != null)
        {
            node.getRparsym().apply(this);
        }
        outANonemptyArglst(node);
    }

    public void inAEmptyArglst(AEmptyArglst node)
    {
        defaultIn(node);
    }

    public void outAEmptyArglst(AEmptyArglst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyArglst(AEmptyArglst node)
    {
        inAEmptyArglst(node);
        if(node.getEmpty() != null)
        {
            node.getEmpty().apply(this);
        }
        outAEmptyArglst(node);
    }

    public void inAMultiArgs(AMultiArgs node)
    {
        defaultIn(node);
    }

    public void outAMultiArgs(AMultiArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiArgs(AMultiArgs node)
    {
        inAMultiArgs(node);
        if(node.getArgs() != null)
        {
            node.getArgs().apply(this);
        }
        if(node.getCommasym() != null)
        {
            node.getCommasym().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAMultiArgs(node);
    }

    public void inASingleArgs(ASingleArgs node)
    {
        defaultIn(node);
    }

    public void outASingleArgs(ASingleArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleArgs(ASingleArgs node)
    {
        inASingleArgs(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASingleArgs(node);
    }

    public void inAPlusAddop(APlusAddop node)
    {
        defaultIn(node);
    }

    public void outAPlusAddop(APlusAddop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusAddop(APlusAddop node)
    {
        inAPlusAddop(node);
        if(node.getPlussym() != null)
        {
            node.getPlussym().apply(this);
        }
        outAPlusAddop(node);
    }

    public void inAMinusAddop(AMinusAddop node)
    {
        defaultIn(node);
    }

    public void outAMinusAddop(AMinusAddop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusAddop(AMinusAddop node)
    {
        inAMinusAddop(node);
        if(node.getMinussym() != null)
        {
            node.getMinussym().apply(this);
        }
        outAMinusAddop(node);
    }

    public void inATimesMulop(ATimesMulop node)
    {
        defaultIn(node);
    }

    public void outATimesMulop(ATimesMulop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesMulop(ATimesMulop node)
    {
        inATimesMulop(node);
        if(node.getTimessym() != null)
        {
            node.getTimessym().apply(this);
        }
        outATimesMulop(node);
    }

    public void inAIdivMulop(AIdivMulop node)
    {
        defaultIn(node);
    }

    public void outAIdivMulop(AIdivMulop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdivMulop(AIdivMulop node)
    {
        inAIdivMulop(node);
        if(node.getIdivsym() != null)
        {
            node.getIdivsym().apply(this);
        }
        outAIdivMulop(node);
    }

    public void inARdivMulop(ARdivMulop node)
    {
        defaultIn(node);
    }

    public void outARdivMulop(ARdivMulop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARdivMulop(ARdivMulop node)
    {
        inARdivMulop(node);
        if(node.getRdivsym() != null)
        {
            node.getRdivsym().apply(this);
        }
        outARdivMulop(node);
    }

    public void inAImodMulop(AImodMulop node)
    {
        defaultIn(node);
    }

    public void outAImodMulop(AImodMulop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImodMulop(AImodMulop node)
    {
        inAImodMulop(node);
        if(node.getImodsym() != null)
        {
            node.getImodsym().apply(this);
        }
        outAImodMulop(node);
    }

    public void inAEqualRelop(AEqualRelop node)
    {
        defaultIn(node);
    }

    public void outAEqualRelop(AEqualRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualRelop(AEqualRelop node)
    {
        inAEqualRelop(node);
        if(node.getEqualsym() != null)
        {
            node.getEqualsym().apply(this);
        }
        outAEqualRelop(node);
    }

    public void inANoteqRelop(ANoteqRelop node)
    {
        defaultIn(node);
    }

    public void outANoteqRelop(ANoteqRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoteqRelop(ANoteqRelop node)
    {
        inANoteqRelop(node);
        if(node.getNoteqsym() != null)
        {
            node.getNoteqsym().apply(this);
        }
        outANoteqRelop(node);
    }

    public void inALessRelop(ALessRelop node)
    {
        defaultIn(node);
    }

    public void outALessRelop(ALessRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessRelop(ALessRelop node)
    {
        inALessRelop(node);
        if(node.getLesssym() != null)
        {
            node.getLesssym().apply(this);
        }
        outALessRelop(node);
    }

    public void inALseqRelop(ALseqRelop node)
    {
        defaultIn(node);
    }

    public void outALseqRelop(ALseqRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALseqRelop(ALseqRelop node)
    {
        inALseqRelop(node);
        if(node.getLseqsym() != null)
        {
            node.getLseqsym().apply(this);
        }
        outALseqRelop(node);
    }

    public void inAGreqRelop(AGreqRelop node)
    {
        defaultIn(node);
    }

    public void outAGreqRelop(AGreqRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreqRelop(AGreqRelop node)
    {
        inAGreqRelop(node);
        if(node.getGreqsym() != null)
        {
            node.getGreqsym().apply(this);
        }
        outAGreqRelop(node);
    }

    public void inAGrtrRelop(AGrtrRelop node)
    {
        defaultIn(node);
    }

    public void outAGrtrRelop(AGrtrRelop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGrtrRelop(AGrtrRelop node)
    {
        inAGrtrRelop(node);
        if(node.getGrtrsym() != null)
        {
            node.getGrtrsym().apply(this);
        }
        outAGrtrRelop(node);
    }
}
