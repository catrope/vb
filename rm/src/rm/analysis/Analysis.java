/* This file was generated by SableCC (http://www.sablecc.org/). */

package rm.analysis;

import rm.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseADefProg(ADefProg node);
    void caseACompProg(ACompProg node);
    void caseAEndProg(AEndProg node);
    void caseALetDef(ALetDef node);
    void caseAExprComp(AExprComp node);
    void caseANonemptyParlst(ANonemptyParlst node);
    void caseAEmptyParlst(AEmptyParlst node);
    void caseAMultiPars(AMultiPars node);
    void caseASinglePars(ASinglePars node);
    void caseAIfthenExpr(AIfthenExpr node);
    void caseARelExpr(ARelExpr node);
    void caseARelRelexpr(ARelRelexpr node);
    void caseASimpleRelexpr(ASimpleRelexpr node);
    void caseATermSmplexpr(ATermSmplexpr node);
    void caseAAddSmplexpr(AAddSmplexpr node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAMulTerm(AMulTerm node);
    void caseAAddopAddopfactor(AAddopAddopfactor node);
    void caseAFactorAddopfactor(AFactorAddopfactor node);
    void caseAExprFactor(AExprFactor node);
    void caseAIntFactor(AIntFactor node);
    void caseARealFactor(ARealFactor node);
    void caseABoolFactor(ABoolFactor node);
    void caseACharFactor(ACharFactor node);
    void caseACallFactor(ACallFactor node);
    void caseANonemptyArglst(ANonemptyArglst node);
    void caseAEmptyArglst(AEmptyArglst node);
    void caseAMultiArgs(AMultiArgs node);
    void caseASingleArgs(ASingleArgs node);
    void caseAPlusAddop(APlusAddop node);
    void caseAMinusAddop(AMinusAddop node);
    void caseATimesMulop(ATimesMulop node);
    void caseAIdivMulop(AIdivMulop node);
    void caseARdivMulop(ARdivMulop node);
    void caseAImodMulop(AImodMulop node);
    void caseAEqualRelop(AEqualRelop node);
    void caseANoteqRelop(ANoteqRelop node);
    void caseALessRelop(ALessRelop node);
    void caseALseqRelop(ALseqRelop node);
    void caseAGreqRelop(AGreqRelop node);
    void caseAGrtrRelop(AGrtrRelop node);

    void caseTPlussym(TPlussym node);
    void caseTMinussym(TMinussym node);
    void caseTTimessym(TTimessym node);
    void caseTIdivsym(TIdivsym node);
    void caseTRdivsym(TRdivsym node);
    void caseTImodsym(TImodsym node);
    void caseTEqualsym(TEqualsym node);
    void caseTNoteqsym(TNoteqsym node);
    void caseTLesssym(TLesssym node);
    void caseTLseqsym(TLseqsym node);
    void caseTGreqsym(TGreqsym node);
    void caseTGrtrsym(TGrtrsym node);
    void caseTLparsym(TLparsym node);
    void caseTRparsym(TRparsym node);
    void caseTQuestionsym(TQuestionsym node);
    void caseTCommasym(TCommasym node);
    void caseTSemicolonsym(TSemicolonsym node);
    void caseTEndsym(TEndsym node);
    void caseTLetsym(TLetsym node);
    void caseTIfsym(TIfsym node);
    void caseTThensym(TThensym node);
    void caseTElsesym(TElsesym node);
    void caseTIntdenotation(TIntdenotation node);
    void caseTRealdenotation(TRealdenotation node);
    void caseTBooldenotation(TBooldenotation node);
    void caseTChardenotation(TChardenotation node);
    void caseTIdent(TIdent node);
    void caseTComment(TComment node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
}
